% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{boot_Z_pips_rcpp}
\alias{boot_Z_pips_rcpp}
\title{Zadlo \ifelse{html}{\out{&pi;}}{\eqn{\pi}}PS bootstrap}
\usage{
boot_Z_pips_rcpp(n_replications, pi_sample, n_boots)
}
\arguments{
\item{n_replications}{Numeric vector. Positive values (not necessarily
integers) of number of replications of sample elements in the pseudo-populations
e.g. inverses of first order inclusion probabilities for sample elements or
calibration weights for sample elements.}

\item{pi_sample}{Numeric vector. Values of first order inclusion probabilities for sample elements.}

\item{n_boots}{Integer. A number of bootstrap samples to be generated.}
}
\value{
Integer matrix with \code{n_boots} rows and \code{length(x_sample)} columns.
Each row is a bootstrap sample, and the number in i-th column denotes how many
times a given unit is resampled.
}
\description{
The function generates bootstrap samples mimicking Brewer's \ifelse{html}{\out{&pi;}}{\eqn{\pi}}PS
sampling scheme (Tille (2006), 112-114) for pseudo-population where numbers
of replications of sample elements do not have to be integers and the
pseudo-population is not physically constructed.
}
\examples{
N <- 200 # population size
x_population <- rgamma(N, 1)
n <- 10  # sample size
pi <- inclusion_probabilities_rcpp(x_population, n)
set.seed(123)
sample <- UPbrewer_rcpp(pi)
x_s <- x_population[sample == 1]
pi_s <- pi[sample == 1]
# g-weigths
g <- sampling::calib(matrix(c(x_s, rep(1, n)), ncol = 2),
                     d = 1 / pi_s, c(sum(x_population), N), method = "linear")
# numbers of replications of sample elements in the pseudo-population
# equal inverses of first order inclusion probabilities:
boot_Z_pips_rcpp(1 / pi_s, pi_s, 5)
# numbers of replications of sample elements in the pseudo-population equal to calibration weights:
boot_Z_pips_rcpp(g / pi_s, pi_s, 5)

}
\references{
Tille, Y. (2006) Sampling algorithms, Springer, New York.
}
